https://stackoverflow.com/questions/6100614/opengl-oblique-projection

Create a 4x4 shear matrix,

H(θ, Φ) = | 1, 0, -cot(θ), 0 |
          | 0, 1, -cot(Φ), 0 |
          | 0, 0,    1,    0 |
          | 0, 0,    0,    1 |

-> Custom

θ being the shear in X, Φ being the shear in Y, and Z being left alone.

Multiply that by your orthographic projection,

| 2/(r-l),     0,       0,    -(r+l)/(r-l) |
|    0,    2/(t-b),     0,    -(t+b)/(t-b) |
|    0,        0,    2/(f-n), -(f+n)/(f-n) |
|    0,        0,       0,          1      |

r = right
l = left
t = top
b = bottom
f = far
n = near

-> glOrtho


===> Nouvelle version :
étape 1 : obtenir une perspective orthométrique sur la caméra :

glMatrixMode(GL_PROJECTION);
glLoadIdentity();
glOrtho(-x, x, -y, y, near, far);

( exemple : )
glOrtho(-100, 100, -100, 100, 1.f, 1000.0f);

étape 2 : déplacer et tourner la position de la scène pour obtenir une vision
pseudo-isométrique :

glMatrixMode(GL_MODELVIEW);
glLoadIdentity();
glTranslatef(0.f, 0.f, -300.f);
glScalef(scale, scale, 1.f)
glRotatef(angle de vue ↕, 1.f, 0.f, 0.f);
glRotatef(angle de vue ↔, 0.f, 1.f, 0.f);

angles en 0, 90, 180 ...
le -300.f peut être ajusté pour être sûr de garder toute la scène dans la vue
de la caméra.
